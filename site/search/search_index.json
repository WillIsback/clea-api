{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Cl\u00e9a-API Cl\u00e9a-API est un framework con\u00e7u pour le chargement de documents et la recherche hybride combinant la recherche vectorielle et bas\u00e9e sur les m\u00e9tadonn\u00e9es. Il fournit des fonctionnalit\u00e9s CRUD pour g\u00e9rer les documents et des endpoints pour effectuer des recherches avanc\u00e9es. Caract\u00e9ristiques principales Chargement de documents : Extraction et traitement de documents dans divers formats (PDF, Word, JSON, etc.). Recherche hybride : Combinaison de la recherche vectorielle et bas\u00e9e sur les m\u00e9tadonn\u00e9es. Gestion des documents : CRUD complet pour les documents. Extensibilit\u00e9 : Architecture modulaire pour ajouter facilement de nouvelles fonctionnalit\u00e9s. Support de PostgreSQL avec pgvector : Stockage et recherche vectorielle optimis\u00e9s. Structure du projet . \u251c\u2500\u2500 clea_doc_loader # Module pour le chargement et l'extraction de documents \u2502 \u251c\u2500\u2500 api # Endpoints pour le chargement de documents \u2502 \u251c\u2500\u2500 src # Logique m\u00e9tier pour l'extraction de documents \u2502 \u2514\u2500\u2500 test # Tests unitaires pour le module \u251c\u2500\u2500 clea_pipeline # Module pour le traitement des documents \u2502 \u251c\u2500\u2500 api # Endpoints pour le traitement des documents \u2502 \u251c\u2500\u2500 src # Logique m\u00e9tier pour le pipeline de traitement \u2502 \u2514\u2500\u2500 test # Tests unitaires pour le module \u251c\u2500\u2500 clea_vectordb # Module pour la gestion des documents et la recherche \u2502 \u251c\u2500\u2500 api # Endpoints pour la gestion et la recherche \u2502 \u251c\u2500\u2500 src # Logique m\u00e9tier pour la base de donn\u00e9es et la recherche \u2502 \u2514\u2500\u2500 test # Tests unitaires pour le module \u251c\u2500\u2500 demo # Fichiers de d\u00e9monstration pour tester les fonctionnalit\u00e9s \u251c\u2500\u2500 main.py # Point d'entr\u00e9e principal de l'application \u251c\u2500\u2500 pyproject.toml # Configuration du projet Python \u251c\u2500\u2500 requirements.txt # Liste des d\u00e9pendances Python \u251c\u2500\u2500 Dockerfile # Fichier Docker pour le d\u00e9ploiement \u251c\u2500\u2500 start.sh # Script pour d\u00e9marrer l'application \u2514\u2500\u2500 README.md # Documentation du projet Installation Pr\u00e9requis Python 3.11 ou sup\u00e9rieur PostgreSQL avec l'extension pgvector WSL (Windows Subsystem for Linux) avec OpenSUSE Tumbleweed (si applicable) \u00c9tapes d'installation Cloner le d\u00e9p\u00f4t git clone https://github.com/votre-repo/clea-api.git cd clea-api Installer les d\u00e9pendances Utilisez le gestionnaire de paquets uv pour installer les d\u00e9pendances : uv pip install -r requirements.txt Configurer les variables d'environnement Cr\u00e9ez un fichier .env \u00e0 la racine du projet et configurez les variables suivantes : DB_USER=postgres DB_PASSWORD=your_password DB_NAME=clea_db DB_HOST=localhost DB_PORT=5432 API_HOST=localhost API_PORT=8080 Initialiser la base de donn\u00e9es Lancez le script d'initialisation de la base de donn\u00e9es : uv python main.py D\u00e9marrer l'application Utilisez le script start.sh pour d\u00e9marrer l'API : ./start.sh L'API sera disponible \u00e0 l'adresse suivante : http://localhost:8080 . Utilisation Endpoints principaux 1. Chargement de documents Endpoint : /doc_loader/upload-file M\u00e9thode : POST Description : Charge un fichier et extrait son contenu. Exemple de requ\u00eate : curl -X POST \"http://localhost:8080/doc_loader/upload-file\" \\ -F \"file=@demo/demo.txt\" \\ -F \"max_length=1000\" \\ -F \"theme=Test\" 2. Traitement des documents Endpoint : /pipeline/process-and-store M\u00e9thode : POST Description : Traite un fichier et l'ins\u00e8re dans la base de donn\u00e9es. Exemple de requ\u00eate : curl -X POST \"http://localhost:8080/pipeline/process-and-store\" \\ -F \"file=@demo/demo.txt\" \\ -F \"max_length=1000\" \\ -F \"theme=Test\" 3. Gestion des documents Endpoint : /database/add_document M\u00e9thode : POST Description : Ajoute un document \u00e0 la base de donn\u00e9es. Exemple de requ\u00eate : curl -X POST \"http://localhost:8080/database/add_document\" \\ -H \"Content-Type: application/json\" \\ -d '[ { \"title\": \"Document de test\", \"content\": \"Ceci est un document de test.\", \"theme\": \"Test\", \"document_type\": \"TXT\", \"publish_date\": \"2025-01-01\" } ]' 4. Recherche hybride Endpoint : /search/hybrid_search M\u00e9thode : POST Description : Recherche des documents en combinant la recherche vectorielle et bas\u00e9e sur les m\u00e9tadonn\u00e9es. Exemple de requ\u00eate : curl -X POST \"http://localhost:8080/search/hybrid_search\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"query\": \"exemple\", \"theme\": \"Test\", \"top_k\": 5 }' Tests Ex\u00e9cuter les tests Pour ex\u00e9cuter les tests unitaires, utilisez la commande suivante : uv run pytest Les tests sont organis\u00e9s par module dans les r\u00e9pertoires test, test et test. D\u00e9ploiement Docker Un fichier Dockerfile est fourni pour d\u00e9ployer l'application dans un conteneur Docker. Construire l'image Docker : docker build -t clea-api . Lancer le conteneur : docker run -p 8080 :8080 clea-api Contribuer Les contributions sont les bienvenues ! Veuillez suivre les \u00e9tapes suivantes pour contribuer : Forkez le d\u00e9p\u00f4t. Cr\u00e9ez une branche pour votre fonctionnalit\u00e9 ou correction de bug. Soumettez une pull request avec une description claire de vos modifications. Licence Ce projet est sous licence MIT. Consultez le fichier LICENSE pour plus d'informations.","title":"Home"},{"location":"#clea-api","text":"Cl\u00e9a-API est un framework con\u00e7u pour le chargement de documents et la recherche hybride combinant la recherche vectorielle et bas\u00e9e sur les m\u00e9tadonn\u00e9es. Il fournit des fonctionnalit\u00e9s CRUD pour g\u00e9rer les documents et des endpoints pour effectuer des recherches avanc\u00e9es.","title":"Cl\u00e9a-API"},{"location":"#caracteristiques-principales","text":"Chargement de documents : Extraction et traitement de documents dans divers formats (PDF, Word, JSON, etc.). Recherche hybride : Combinaison de la recherche vectorielle et bas\u00e9e sur les m\u00e9tadonn\u00e9es. Gestion des documents : CRUD complet pour les documents. Extensibilit\u00e9 : Architecture modulaire pour ajouter facilement de nouvelles fonctionnalit\u00e9s. Support de PostgreSQL avec pgvector : Stockage et recherche vectorielle optimis\u00e9s.","title":"Caract\u00e9ristiques principales"},{"location":"#structure-du-projet","text":". \u251c\u2500\u2500 clea_doc_loader # Module pour le chargement et l'extraction de documents \u2502 \u251c\u2500\u2500 api # Endpoints pour le chargement de documents \u2502 \u251c\u2500\u2500 src # Logique m\u00e9tier pour l'extraction de documents \u2502 \u2514\u2500\u2500 test # Tests unitaires pour le module \u251c\u2500\u2500 clea_pipeline # Module pour le traitement des documents \u2502 \u251c\u2500\u2500 api # Endpoints pour le traitement des documents \u2502 \u251c\u2500\u2500 src # Logique m\u00e9tier pour le pipeline de traitement \u2502 \u2514\u2500\u2500 test # Tests unitaires pour le module \u251c\u2500\u2500 clea_vectordb # Module pour la gestion des documents et la recherche \u2502 \u251c\u2500\u2500 api # Endpoints pour la gestion et la recherche \u2502 \u251c\u2500\u2500 src # Logique m\u00e9tier pour la base de donn\u00e9es et la recherche \u2502 \u2514\u2500\u2500 test # Tests unitaires pour le module \u251c\u2500\u2500 demo # Fichiers de d\u00e9monstration pour tester les fonctionnalit\u00e9s \u251c\u2500\u2500 main.py # Point d'entr\u00e9e principal de l'application \u251c\u2500\u2500 pyproject.toml # Configuration du projet Python \u251c\u2500\u2500 requirements.txt # Liste des d\u00e9pendances Python \u251c\u2500\u2500 Dockerfile # Fichier Docker pour le d\u00e9ploiement \u251c\u2500\u2500 start.sh # Script pour d\u00e9marrer l'application \u2514\u2500\u2500 README.md # Documentation du projet","title":"Structure du projet"},{"location":"#installation","text":"","title":"Installation"},{"location":"#prerequis","text":"Python 3.11 ou sup\u00e9rieur PostgreSQL avec l'extension pgvector WSL (Windows Subsystem for Linux) avec OpenSUSE Tumbleweed (si applicable)","title":"Pr\u00e9requis"},{"location":"#etapes-dinstallation","text":"Cloner le d\u00e9p\u00f4t git clone https://github.com/votre-repo/clea-api.git cd clea-api Installer les d\u00e9pendances Utilisez le gestionnaire de paquets uv pour installer les d\u00e9pendances : uv pip install -r requirements.txt Configurer les variables d'environnement Cr\u00e9ez un fichier .env \u00e0 la racine du projet et configurez les variables suivantes : DB_USER=postgres DB_PASSWORD=your_password DB_NAME=clea_db DB_HOST=localhost DB_PORT=5432 API_HOST=localhost API_PORT=8080 Initialiser la base de donn\u00e9es Lancez le script d'initialisation de la base de donn\u00e9es : uv python main.py D\u00e9marrer l'application Utilisez le script start.sh pour d\u00e9marrer l'API : ./start.sh L'API sera disponible \u00e0 l'adresse suivante : http://localhost:8080 .","title":"\u00c9tapes d'installation"},{"location":"#utilisation","text":"","title":"Utilisation"},{"location":"#endpoints-principaux","text":"","title":"Endpoints principaux"},{"location":"#1-chargement-de-documents","text":"Endpoint : /doc_loader/upload-file M\u00e9thode : POST Description : Charge un fichier et extrait son contenu. Exemple de requ\u00eate : curl -X POST \"http://localhost:8080/doc_loader/upload-file\" \\ -F \"file=@demo/demo.txt\" \\ -F \"max_length=1000\" \\ -F \"theme=Test\"","title":"1. Chargement de documents"},{"location":"#2-traitement-des-documents","text":"Endpoint : /pipeline/process-and-store M\u00e9thode : POST Description : Traite un fichier et l'ins\u00e8re dans la base de donn\u00e9es. Exemple de requ\u00eate : curl -X POST \"http://localhost:8080/pipeline/process-and-store\" \\ -F \"file=@demo/demo.txt\" \\ -F \"max_length=1000\" \\ -F \"theme=Test\"","title":"2. Traitement des documents"},{"location":"#3-gestion-des-documents","text":"Endpoint : /database/add_document M\u00e9thode : POST Description : Ajoute un document \u00e0 la base de donn\u00e9es. Exemple de requ\u00eate : curl -X POST \"http://localhost:8080/database/add_document\" \\ -H \"Content-Type: application/json\" \\ -d '[ { \"title\": \"Document de test\", \"content\": \"Ceci est un document de test.\", \"theme\": \"Test\", \"document_type\": \"TXT\", \"publish_date\": \"2025-01-01\" } ]'","title":"3. Gestion des documents"},{"location":"#4-recherche-hybride","text":"Endpoint : /search/hybrid_search M\u00e9thode : POST Description : Recherche des documents en combinant la recherche vectorielle et bas\u00e9e sur les m\u00e9tadonn\u00e9es. Exemple de requ\u00eate : curl -X POST \"http://localhost:8080/search/hybrid_search\" \\ -H \"Content-Type: application/json\" \\ -d '{ \"query\": \"exemple\", \"theme\": \"Test\", \"top_k\": 5 }'","title":"4. Recherche hybride"},{"location":"#tests","text":"","title":"Tests"},{"location":"#executer-les-tests","text":"Pour ex\u00e9cuter les tests unitaires, utilisez la commande suivante : uv run pytest Les tests sont organis\u00e9s par module dans les r\u00e9pertoires test, test et test.","title":"Ex\u00e9cuter les tests"},{"location":"#deploiement","text":"","title":"D\u00e9ploiement"},{"location":"#docker","text":"Un fichier Dockerfile est fourni pour d\u00e9ployer l'application dans un conteneur Docker. Construire l'image Docker : docker build -t clea-api . Lancer le conteneur : docker run -p 8080 :8080 clea-api","title":"Docker"},{"location":"#contribuer","text":"Les contributions sont les bienvenues ! Veuillez suivre les \u00e9tapes suivantes pour contribuer : Forkez le d\u00e9p\u00f4t. Cr\u00e9ez une branche pour votre fonctionnalit\u00e9 ou correction de bug. Soumettez une pull request avec une description claire de vos modifications.","title":"Contribuer"},{"location":"#licence","text":"Ce projet est sous licence MIT. Consultez le fichier LICENSE pour plus d'informations.","title":"Licence"},{"location":"doc_loader/","text":"Class DocsLoader DocsLoader __init__ ( file_path ) Initialise un chargeur de documents bas\u00e9 sur le type de fichier. Parameters: file_path ( str ) \u2013 Chemin vers le fichier \u00e0 traiter. extract_documents ( max_length = 1000 ) Extrait les documents du fichier en chunks de taille maximale sp\u00e9cifi\u00e9e. Parameters: max_length ( int , default: 1000 ) \u2013 Taille maximale d'un chunk. Par d\u00e9faut 1000. Returns: Iterator [ ExtractedDocument ] \u2013 Un it\u00e9rateur sur les documents extraits. get_extractor ( file_path ) Retrieve the appropriate extractor for a given file based on its extension. :param file_path: Path to the file to be processed. :type file_path: str :raises UnsupportedFileTypeError: If the file type is not supported. :return: An instance of the extractor class for the file type. :rtype: BaseExtractor","title":"doc_loader"},{"location":"doc_loader/#class-docsloader","text":"","title":"Class DocsLoader"},{"location":"doc_loader/#doc_loader.DocsLoader","text":"","title":"DocsLoader"},{"location":"doc_loader/#doc_loader.DocsLoader.__init__","text":"Initialise un chargeur de documents bas\u00e9 sur le type de fichier. Parameters: file_path ( str ) \u2013 Chemin vers le fichier \u00e0 traiter.","title":"__init__"},{"location":"doc_loader/#doc_loader.DocsLoader.extract_documents","text":"Extrait les documents du fichier en chunks de taille maximale sp\u00e9cifi\u00e9e. Parameters: max_length ( int , default: 1000 ) \u2013 Taille maximale d'un chunk. Par d\u00e9faut 1000. Returns: Iterator [ ExtractedDocument ] \u2013 Un it\u00e9rateur sur les documents extraits.","title":"extract_documents"},{"location":"doc_loader/#doc_loader.get_extractor","text":"Retrieve the appropriate extractor for a given file based on its extension. :param file_path: Path to the file to be processed. :type file_path: str :raises UnsupportedFileTypeError: If the file type is not supported. :return: An instance of the extractor class for the file type. :rtype: BaseExtractor","title":"get_extractor"},{"location":"pipeline/","text":"References process_and_store ( file_path , max_length = 1000 , theme = 'Th\u00e8me g\u00e9n\u00e9rique' ) Charge un fichier, extrait les documents, et les ins\u00e8re dans la base de donn\u00e9es. Parameters: file_path ( str ) \u2013 Chemin du fichier \u00e0 traiter. max_length ( int , default: 1000 ) \u2013 Taille maximale d'un chunk. theme ( str , default: 'Th\u00e8me g\u00e9n\u00e9rique' ) \u2013 Th\u00e8me \u00e0 appliquer aux documents. Returns: \u2013 List[DocumentCreate]: Liste des documents ajout\u00e9s avec leurs IDs.","title":"pipeline"},{"location":"pipeline/#references","text":"","title":"References"},{"location":"pipeline/#pipeline.process_and_store","text":"Charge un fichier, extrait les documents, et les ins\u00e8re dans la base de donn\u00e9es. Parameters: file_path ( str ) \u2013 Chemin du fichier \u00e0 traiter. max_length ( int , default: 1000 ) \u2013 Taille maximale d'un chunk. theme ( str , default: 'Th\u00e8me g\u00e9n\u00e9rique' ) \u2013 Th\u00e8me \u00e0 appliquer aux documents. Returns: \u2013 List[DocumentCreate]: Liste des documents ajout\u00e9s avec leurs IDs.","title":"process_and_store"},{"location":"rest_api/","text":"REST API Documentation Clea API 1.0.0 API pour g\u00e9rer les documents et effectuer des recherches. Database POST /database/add_document Ajouter des documents Description Ajoute une liste de documents \u00e0 la base de donn\u00e9es. Args: documents: Liste des documents \u00e0 ajouter. Returns: Liste des documents ajout\u00e9s avec leurs IDs. Raises: ValueError: Si une erreur survient lors de l'ajout des documents. Request body application/json [ { \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" } ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"items\" : { \"$ref\" : \"#/components/schemas/DocumentCreate\" }, \"type\" : \"array\" , \"title\" : \"Documents\" } Response 200 OK application/json [ { \"id\" : 0 , \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" } ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"items\" : { \"$ref\" : \"#/components/schemas/DocumentResponse\" }, \"type\" : \"array\" , \"title\" : \"Response Add Documents Endpoint Database Add Document Post\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" } DELETE /database/delete_document Supprimer un document Description Supprime un document de la base de donn\u00e9es en fonction de son ID. Input parameters Parameter In Type Default Nullable Description document_id query integer No Response 200 OK application/json Schema of the response body Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" } PUT /database/update_document Mettre \u00e0 jour un document Description Met \u00e0 jour un document existant dans la base de donn\u00e9es. Args: payload: Donn\u00e9es pour mettre \u00e0 jour le document. Returns: Document mis \u00e0 jour. Raises: HTTPException: Si le document n'existe pas ou si une erreur survient. Request body application/json { \"document_id\" : 0 , \"title\" : null , \"content\" : null , \"theme\" : null , \"document_type\" : null , \"publish_date\" : null } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"properties\" : { \"document_id\" : { \"type\" : \"integer\" , \"title\" : \"Document Id\" , \"description\" : \"Identifiant unique du document \u00e0 mettre \u00e0 jour\" }, \"title\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Title\" , \"description\" : \"Titre mis \u00e0 jour du document\" }, \"content\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Content\" , \"description\" : \"Contenu mis \u00e0 jour du document\" }, \"theme\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Theme\" , \"description\" : \"Th\u00e8me mis \u00e0 jour du document\" }, \"document_type\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Document Type\" , \"description\" : \"Type mis \u00e0 jour du document\" }, \"publish_date\" : { \"anyOf\" : [ { \"type\" : \"string\" , \"format\" : \"date\" }, { \"type\" : \"null\" } ], \"title\" : \"Publish Date\" , \"description\" : \"Date de publication mise \u00e0 jour (format ISO)\" } }, \"type\" : \"object\" , \"required\" : [ \"document_id\" ], \"title\" : \"DocumentUpdate\" , \"description\" : \"Classe repr\u00e9sentant un document \u00e0 mettre \u00e0 jour.\\n\\nArgs:\\n document_id: ID du document \u00e0 mettre \u00e0 jour.\\n title: Nouveau titre.\\n content: Nouveau contenu.\\n theme: Nouveau th\u00e8me.\\n document_type: Nouveau type de document.\\n publish_date: Nouvelle date de publication.\" } Response 200 OK application/json { \"id\" : 0 , \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"id\" : { \"type\" : \"integer\" , \"title\" : \"Id\" }, \"title\" : { \"type\" : \"string\" , \"title\" : \"Title\" }, \"content\" : { \"type\" : \"string\" , \"title\" : \"Content\" }, \"theme\" : { \"type\" : \"string\" , \"title\" : \"Theme\" }, \"document_type\" : { \"type\" : \"string\" , \"title\" : \"Document Type\" }, \"publish_date\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"title\" : \"Publish Date\" } }, \"type\" : \"object\" , \"required\" : [ \"id\" , \"title\" , \"content\" , \"theme\" , \"document_type\" , \"publish_date\" ], \"title\" : \"DocumentResponse\" , \"description\" : \"Classe repr\u00e9sentant un document de r\u00e9ponse.\\n\\nArgs:\\n id: ID du document.\\n title: Titre du document.\\n content: Contenu du document.\\n theme: Th\u00e8me du document.\\n document_type: Type de document.\\n publish_date: Date de publication du document.\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" } GET /database/list_documents Lister les documents Description Affiche la liste des documents dans la base de donn\u00e9es. Returns: Liste de tous les documents dans la base de donn\u00e9es. Response 200 OK application/json [ { \"id\" : 0 , \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" } ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"items\" : { \"$ref\" : \"#/components/schemas/DocumentResponse\" }, \"type\" : \"array\" , \"title\" : \"Response List Documents Endpoint Database List Documents Get\" } Search POST /search/hybrid_search Rechercher des documents hybride Description Recherche des documents en fonction de la similarit\u00e9 vectorielle et reranking d'une requ\u00eate et de filtres optionnels. Request body application/json { \"query\" : \"string\" , \"top_k\" : 0 , \"theme\" : null , \"document_type\" : null , \"start_date\" : null , \"end_date\" : null } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"properties\" : { \"query\" : { \"type\" : \"string\" , \"title\" : \"Query\" }, \"top_k\" : { \"type\" : \"integer\" , \"title\" : \"Top K\" , \"default\" : 10 }, \"theme\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Theme\" }, \"document_type\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Document Type\" }, \"start_date\" : { \"anyOf\" : [ { \"type\" : \"string\" , \"format\" : \"date\" }, { \"type\" : \"null\" } ], \"title\" : \"Start Date\" }, \"end_date\" : { \"anyOf\" : [ { \"type\" : \"string\" , \"format\" : \"date\" }, { \"type\" : \"null\" } ], \"title\" : \"End Date\" } }, \"type\" : \"object\" , \"required\" : [ \"query\" ], \"title\" : \"DocumentSearchRequest\" , \"description\" : \"Classe repr\u00e9sentant une requ\u00eate de recherche de documents.\\n\\nContient la requ\u00eate de recherche, le nombre de r\u00e9sultats souhait\u00e9s et les filtres optionnels.\\n\\nArgs:\\n query (str): La requ\u00eate de recherche.\\n top_k (int): Nombre de r\u00e9sultats \u00e0 retourner, par d\u00e9faut 10.\\n theme (str, optional): Th\u00e8me du document pour le filtrage.\\n document_type (str, optional): Type de document pour le filtrage.\\n start_date (date, optional): Date de d\u00e9but pour le filtrage.\\n end_date (date, optional): Date de fin pour le filtrage.\" } Response 200 OK application/json { \"query\" : \"string\" , \"filters\" : null , \"total_results\" : 0 , \"results\" : [ { \"id\" : 0 , \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" , \"metadata\" : {} } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"query\" : { \"type\" : \"string\" , \"title\" : \"Query\" }, \"filters\" : { \"anyOf\" : [ { \"additionalProperties\" : true , \"type\" : \"object\" }, { \"type\" : \"null\" } ], \"title\" : \"Filters\" }, \"total_results\" : { \"type\" : \"integer\" , \"title\" : \"Total Results\" }, \"results\" : { \"items\" : { \"$ref\" : \"#/components/schemas/DocumentSearchResponse\" }, \"type\" : \"array\" , \"title\" : \"Results\" } }, \"type\" : \"object\" , \"required\" : [ \"query\" , \"filters\" , \"total_results\" , \"results\" ], \"title\" : \"SearchResults\" , \"description\" : \"Classe repr\u00e9sentant les r\u00e9sultats de recherche.\\n\\nContient la requ\u00eate, les filtres appliqu\u00e9s, le nombre total de r\u00e9sultats et les r\u00e9sultats eux-m\u00eames.\\n\\nArgs:\\n query (str): La requ\u00eate de recherche.\\n filters (dict, optional): Les filtres appliqu\u00e9s lors de la recherche.\\n total_results (int): Le nombre total de r\u00e9sultats trouv\u00e9s.\\n results (List[DocumentSearchResponse]): Liste des r\u00e9sultats de recherche format\u00e9s.\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" } DocLoader POST /doc_loader/upload-file Uploader un fichier et le traiter Description Uploade un fichier, l'extrait et le divise en chunks. Args: file: Fichier upload\u00e9 par l'utilisateur. max_length: Taille maximale d'un chunk. Par d\u00e9faut 1000. theme: Th\u00e8me du document. Par d\u00e9faut \"Th\u00e8me g\u00e9n\u00e9rique\". Returns: Liste des documents extraits. Raises: HTTPException: Si une erreur survient lors du traitement ou si aucun contenu n'est extrait. Input parameters Parameter In Type Default Nullable Description max_length query integer 1000 No Taille maximale d'un chunk theme query string Th\u00e8me g\u00e9n\u00e9rique No Th\u00e8me du document Request body multipart/form-data { \"file\" : \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"properties\" : { \"file\" : { \"type\" : \"string\" , \"format\" : \"binary\" , \"title\" : \"File\" , \"description\" : \"Fichier \u00e0 traiter\" } }, \"type\" : \"object\" , \"required\" : [ \"file\" ], \"title\" : \"Body_upload_and_process_file_doc_loader_upload_file_post\" } Response 200 OK application/json [ { \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" , \"embedding\" : null } ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/ExtractedDocument\" }, \"title\" : \"Response Upload And Process File Doc Loader Upload File Post\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" } Pipeline POST /pipeline/process-and-store Charger un fichier, l'extraire et l'ins\u00e9rer dans la base de donn\u00e9es Description Charge un fichier, extrait les documents et les ins\u00e8re dans la base de donn\u00e9es. Args: file (UploadFile): Fichier upload\u00e9 par l'utilisateur. max_length (int): Taille maximale d'un chunk. theme (str): Th\u00e8me \u00e0 appliquer aux documents. Returns: List[Dict]: Liste des documents ajout\u00e9s avec leurs IDs. Input parameters Parameter In Type Default Nullable Description max_length query integer 1000 No Taille maximale d'un chunk theme query string Th\u00e8me g\u00e9n\u00e9rique No Th\u00e8me du document Request body multipart/form-data { \"file\" : \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"properties\" : { \"file\" : { \"type\" : \"string\" , \"format\" : \"binary\" , \"title\" : \"File\" , \"description\" : \"Fichier \u00e0 traiter\" } }, \"type\" : \"object\" , \"required\" : [ \"file\" ], \"title\" : \"Body_process_and_store_endpoint_pipeline_process_and_store_post\" } Response 200 OK application/json [ {} ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"array\" , \"items\" : { \"type\" : \"object\" , \"additionalProperties\" : true }, \"title\" : \"Response Process And Store Endpoint Pipeline Process And Store Post\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" } Endpoints GET / Root Response 200 OK application/json Schema of the response body Schemas Body_process_and_store_endpoint_pipeline_process_and_store_post Name Type file string ( binary ) Body_upload_and_process_file_doc_loader_upload_file_post Name Type file string ( binary ) DocumentCreate Name Type content string document_type string publish_date string ( date ) theme string title string DocumentResponse Name Type content string document_type string id integer publish_date string ( date ) theme string title string DocumentSearchRequest Name Type document_type end_date query string start_date theme top_k integer DocumentSearchResponse Name Type content string document_type string id integer metadata publish_date string ( date ) theme string title string DocumentUpdate Name Type content document_id integer document_type publish_date theme title ExtractedDocument Name Type content string document_type string embedding publish_date string ( date ) theme string title string HTTPValidationError Name Type detail Array< ValidationError > SearchResults Name Type filters query string results Array< DocumentSearchResponse > total_results integer ValidationError Name Type loc Array<> msg string type string","title":"REST API"},{"location":"rest_api/#rest-api-documentation","text":"","title":"REST API Documentation"},{"location":"rest_api/#clea-api-100","text":"API pour g\u00e9rer les documents et effectuer des recherches.","title":"Clea API 1.0.0"},{"location":"rest_api/#database","text":"","title":"Database"},{"location":"rest_api/#post-databaseadd_document","text":"Ajouter des documents Description Ajoute une liste de documents \u00e0 la base de donn\u00e9es. Args: documents: Liste des documents \u00e0 ajouter. Returns: Liste des documents ajout\u00e9s avec leurs IDs. Raises: ValueError: Si une erreur survient lors de l'ajout des documents. Request body application/json [ { \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" } ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"items\" : { \"$ref\" : \"#/components/schemas/DocumentCreate\" }, \"type\" : \"array\" , \"title\" : \"Documents\" } Response 200 OK application/json [ { \"id\" : 0 , \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" } ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"items\" : { \"$ref\" : \"#/components/schemas/DocumentResponse\" }, \"type\" : \"array\" , \"title\" : \"Response Add Documents Endpoint Database Add Document Post\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" }","title":"POST /database/add_document"},{"location":"rest_api/#delete-databasedelete_document","text":"Supprimer un document Description Supprime un document de la base de donn\u00e9es en fonction de son ID. Input parameters Parameter In Type Default Nullable Description document_id query integer No Response 200 OK application/json Schema of the response body Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" }","title":"DELETE /database/delete_document"},{"location":"rest_api/#put-databaseupdate_document","text":"Mettre \u00e0 jour un document Description Met \u00e0 jour un document existant dans la base de donn\u00e9es. Args: payload: Donn\u00e9es pour mettre \u00e0 jour le document. Returns: Document mis \u00e0 jour. Raises: HTTPException: Si le document n'existe pas ou si une erreur survient. Request body application/json { \"document_id\" : 0 , \"title\" : null , \"content\" : null , \"theme\" : null , \"document_type\" : null , \"publish_date\" : null } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"properties\" : { \"document_id\" : { \"type\" : \"integer\" , \"title\" : \"Document Id\" , \"description\" : \"Identifiant unique du document \u00e0 mettre \u00e0 jour\" }, \"title\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Title\" , \"description\" : \"Titre mis \u00e0 jour du document\" }, \"content\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Content\" , \"description\" : \"Contenu mis \u00e0 jour du document\" }, \"theme\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Theme\" , \"description\" : \"Th\u00e8me mis \u00e0 jour du document\" }, \"document_type\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Document Type\" , \"description\" : \"Type mis \u00e0 jour du document\" }, \"publish_date\" : { \"anyOf\" : [ { \"type\" : \"string\" , \"format\" : \"date\" }, { \"type\" : \"null\" } ], \"title\" : \"Publish Date\" , \"description\" : \"Date de publication mise \u00e0 jour (format ISO)\" } }, \"type\" : \"object\" , \"required\" : [ \"document_id\" ], \"title\" : \"DocumentUpdate\" , \"description\" : \"Classe repr\u00e9sentant un document \u00e0 mettre \u00e0 jour.\\n\\nArgs:\\n document_id: ID du document \u00e0 mettre \u00e0 jour.\\n title: Nouveau titre.\\n content: Nouveau contenu.\\n theme: Nouveau th\u00e8me.\\n document_type: Nouveau type de document.\\n publish_date: Nouvelle date de publication.\" } Response 200 OK application/json { \"id\" : 0 , \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"id\" : { \"type\" : \"integer\" , \"title\" : \"Id\" }, \"title\" : { \"type\" : \"string\" , \"title\" : \"Title\" }, \"content\" : { \"type\" : \"string\" , \"title\" : \"Content\" }, \"theme\" : { \"type\" : \"string\" , \"title\" : \"Theme\" }, \"document_type\" : { \"type\" : \"string\" , \"title\" : \"Document Type\" }, \"publish_date\" : { \"type\" : \"string\" , \"format\" : \"date\" , \"title\" : \"Publish Date\" } }, \"type\" : \"object\" , \"required\" : [ \"id\" , \"title\" , \"content\" , \"theme\" , \"document_type\" , \"publish_date\" ], \"title\" : \"DocumentResponse\" , \"description\" : \"Classe repr\u00e9sentant un document de r\u00e9ponse.\\n\\nArgs:\\n id: ID du document.\\n title: Titre du document.\\n content: Contenu du document.\\n theme: Th\u00e8me du document.\\n document_type: Type de document.\\n publish_date: Date de publication du document.\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" }","title":"PUT /database/update_document"},{"location":"rest_api/#get-databaselist_documents","text":"Lister les documents Description Affiche la liste des documents dans la base de donn\u00e9es. Returns: Liste de tous les documents dans la base de donn\u00e9es. Response 200 OK application/json [ { \"id\" : 0 , \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" } ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"items\" : { \"$ref\" : \"#/components/schemas/DocumentResponse\" }, \"type\" : \"array\" , \"title\" : \"Response List Documents Endpoint Database List Documents Get\" }","title":"GET /database/list_documents"},{"location":"rest_api/#search","text":"","title":"Search"},{"location":"rest_api/#post-searchhybrid_search","text":"Rechercher des documents hybride Description Recherche des documents en fonction de la similarit\u00e9 vectorielle et reranking d'une requ\u00eate et de filtres optionnels. Request body application/json { \"query\" : \"string\" , \"top_k\" : 0 , \"theme\" : null , \"document_type\" : null , \"start_date\" : null , \"end_date\" : null } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"properties\" : { \"query\" : { \"type\" : \"string\" , \"title\" : \"Query\" }, \"top_k\" : { \"type\" : \"integer\" , \"title\" : \"Top K\" , \"default\" : 10 }, \"theme\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Theme\" }, \"document_type\" : { \"anyOf\" : [ { \"type\" : \"string\" }, { \"type\" : \"null\" } ], \"title\" : \"Document Type\" }, \"start_date\" : { \"anyOf\" : [ { \"type\" : \"string\" , \"format\" : \"date\" }, { \"type\" : \"null\" } ], \"title\" : \"Start Date\" }, \"end_date\" : { \"anyOf\" : [ { \"type\" : \"string\" , \"format\" : \"date\" }, { \"type\" : \"null\" } ], \"title\" : \"End Date\" } }, \"type\" : \"object\" , \"required\" : [ \"query\" ], \"title\" : \"DocumentSearchRequest\" , \"description\" : \"Classe repr\u00e9sentant une requ\u00eate de recherche de documents.\\n\\nContient la requ\u00eate de recherche, le nombre de r\u00e9sultats souhait\u00e9s et les filtres optionnels.\\n\\nArgs:\\n query (str): La requ\u00eate de recherche.\\n top_k (int): Nombre de r\u00e9sultats \u00e0 retourner, par d\u00e9faut 10.\\n theme (str, optional): Th\u00e8me du document pour le filtrage.\\n document_type (str, optional): Type de document pour le filtrage.\\n start_date (date, optional): Date de d\u00e9but pour le filtrage.\\n end_date (date, optional): Date de fin pour le filtrage.\" } Response 200 OK application/json { \"query\" : \"string\" , \"filters\" : null , \"total_results\" : 0 , \"results\" : [ { \"id\" : 0 , \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" , \"metadata\" : {} } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"query\" : { \"type\" : \"string\" , \"title\" : \"Query\" }, \"filters\" : { \"anyOf\" : [ { \"additionalProperties\" : true , \"type\" : \"object\" }, { \"type\" : \"null\" } ], \"title\" : \"Filters\" }, \"total_results\" : { \"type\" : \"integer\" , \"title\" : \"Total Results\" }, \"results\" : { \"items\" : { \"$ref\" : \"#/components/schemas/DocumentSearchResponse\" }, \"type\" : \"array\" , \"title\" : \"Results\" } }, \"type\" : \"object\" , \"required\" : [ \"query\" , \"filters\" , \"total_results\" , \"results\" ], \"title\" : \"SearchResults\" , \"description\" : \"Classe repr\u00e9sentant les r\u00e9sultats de recherche.\\n\\nContient la requ\u00eate, les filtres appliqu\u00e9s, le nombre total de r\u00e9sultats et les r\u00e9sultats eux-m\u00eames.\\n\\nArgs:\\n query (str): La requ\u00eate de recherche.\\n filters (dict, optional): Les filtres appliqu\u00e9s lors de la recherche.\\n total_results (int): Le nombre total de r\u00e9sultats trouv\u00e9s.\\n results (List[DocumentSearchResponse]): Liste des r\u00e9sultats de recherche format\u00e9s.\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" }","title":"POST /search/hybrid_search"},{"location":"rest_api/#docloader","text":"","title":"DocLoader"},{"location":"rest_api/#post-doc_loaderupload-file","text":"Uploader un fichier et le traiter Description Uploade un fichier, l'extrait et le divise en chunks. Args: file: Fichier upload\u00e9 par l'utilisateur. max_length: Taille maximale d'un chunk. Par d\u00e9faut 1000. theme: Th\u00e8me du document. Par d\u00e9faut \"Th\u00e8me g\u00e9n\u00e9rique\". Returns: Liste des documents extraits. Raises: HTTPException: Si une erreur survient lors du traitement ou si aucun contenu n'est extrait. Input parameters Parameter In Type Default Nullable Description max_length query integer 1000 No Taille maximale d'un chunk theme query string Th\u00e8me g\u00e9n\u00e9rique No Th\u00e8me du document Request body multipart/form-data { \"file\" : \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"properties\" : { \"file\" : { \"type\" : \"string\" , \"format\" : \"binary\" , \"title\" : \"File\" , \"description\" : \"Fichier \u00e0 traiter\" } }, \"type\" : \"object\" , \"required\" : [ \"file\" ], \"title\" : \"Body_upload_and_process_file_doc_loader_upload_file_post\" } Response 200 OK application/json [ { \"title\" : \"string\" , \"content\" : \"string\" , \"theme\" : \"string\" , \"document_type\" : \"string\" , \"publish_date\" : \"2022-04-13\" , \"embedding\" : null } ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/ExtractedDocument\" }, \"title\" : \"Response Upload And Process File Doc Loader Upload File Post\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" }","title":"POST /doc_loader/upload-file"},{"location":"rest_api/#pipeline","text":"","title":"Pipeline"},{"location":"rest_api/#post-pipelineprocess-and-store","text":"Charger un fichier, l'extraire et l'ins\u00e9rer dans la base de donn\u00e9es Description Charge un fichier, extrait les documents et les ins\u00e8re dans la base de donn\u00e9es. Args: file (UploadFile): Fichier upload\u00e9 par l'utilisateur. max_length (int): Taille maximale d'un chunk. theme (str): Th\u00e8me \u00e0 appliquer aux documents. Returns: List[Dict]: Liste des documents ajout\u00e9s avec leurs IDs. Input parameters Parameter In Type Default Nullable Description max_length query integer 1000 No Taille maximale d'un chunk theme query string Th\u00e8me g\u00e9n\u00e9rique No Th\u00e8me du document Request body multipart/form-data { \"file\" : \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=\" } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the request body { \"properties\" : { \"file\" : { \"type\" : \"string\" , \"format\" : \"binary\" , \"title\" : \"File\" , \"description\" : \"Fichier \u00e0 traiter\" } }, \"type\" : \"object\" , \"required\" : [ \"file\" ], \"title\" : \"Body_process_and_store_endpoint_pipeline_process_and_store_post\" } Response 200 OK application/json [ {} ] \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"type\" : \"array\" , \"items\" : { \"type\" : \"object\" , \"additionalProperties\" : true }, \"title\" : \"Response Process And Store Endpoint Pipeline Process And Store Post\" } Response 422 Unprocessable Content application/json { \"detail\" : [ { \"loc\" : [ null ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information. Schema of the response body { \"properties\" : { \"detail\" : { \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" }, \"type\" : \"array\" , \"title\" : \"Detail\" } }, \"type\" : \"object\" , \"title\" : \"HTTPValidationError\" }","title":"POST /pipeline/process-and-store"},{"location":"rest_api/#endpoints","text":"","title":"Endpoints"},{"location":"rest_api/#get","text":"Root Response 200 OK application/json Schema of the response body","title":"GET /"},{"location":"rest_api/#schemas","text":"","title":"Schemas"},{"location":"rest_api/#body_process_and_store_endpoint_pipeline_process_and_store_post","text":"Name Type file string ( binary )","title":"Body_process_and_store_endpoint_pipeline_process_and_store_post"},{"location":"rest_api/#body_upload_and_process_file_doc_loader_upload_file_post","text":"Name Type file string ( binary )","title":"Body_upload_and_process_file_doc_loader_upload_file_post"},{"location":"rest_api/#documentcreate","text":"Name Type content string document_type string publish_date string ( date ) theme string title string","title":"DocumentCreate"},{"location":"rest_api/#documentresponse","text":"Name Type content string document_type string id integer publish_date string ( date ) theme string title string","title":"DocumentResponse"},{"location":"rest_api/#documentsearchrequest","text":"Name Type document_type end_date query string start_date theme top_k integer","title":"DocumentSearchRequest"},{"location":"rest_api/#documentsearchresponse","text":"Name Type content string document_type string id integer metadata publish_date string ( date ) theme string title string","title":"DocumentSearchResponse"},{"location":"rest_api/#documentupdate","text":"Name Type content document_id integer document_type publish_date theme title","title":"DocumentUpdate"},{"location":"rest_api/#extracteddocument","text":"Name Type content string document_type string embedding publish_date string ( date ) theme string title string","title":"ExtractedDocument"},{"location":"rest_api/#httpvalidationerror","text":"Name Type detail Array< ValidationError >","title":"HTTPValidationError"},{"location":"rest_api/#searchresults","text":"Name Type filters query string results Array< DocumentSearchResponse > total_results integer","title":"SearchResults"},{"location":"rest_api/#validationerror","text":"Name Type loc Array<> msg string type string","title":"ValidationError"},{"location":"vectordb/","text":"References Document Bases: Base Mod\u00e8le SQLAlchemy repr\u00e9sentant un document dans la base de donn\u00e9es. Attributes: id ( Mapped [ int ] ) \u2013 Identifiant unique du document. title ( Mapped [ str ] ) \u2013 Titre du document. content ( Mapped [ str ] ) \u2013 Contenu du document. theme ( Mapped [ str ] ) \u2013 Th\u00e8me du document. document_type ( Mapped [ str ] ) \u2013 Type de document. publish_date ( Mapped [ date ] ) \u2013 Date de publication du document. embedding ( Mapped [ Optional [ str ]] ) \u2013 Repr\u00e9sentation vectorielle du contenu du document. SearchEngine Classe principale pour effectuer des recherches hybrides. Combine filtrage par m\u00e9tadonn\u00e9es et recherche vectorielle. __init__ () Initialise les composants n\u00e9cessaires pour la recherche. format_results ( query , results , filters ) Formate les r\u00e9sultats de recherche avant de les renvoyer au frontend. Parameters: query ( str ) \u2013 La requ\u00eate de recherche. results ( List [ Document ] ) \u2013 Liste des r\u00e9sultats de recherche. filters ( dict ) \u2013 Filtres appliqu\u00e9s lors de la recherche. Returns: List [ DocumentSearchResponse ] \u2013 List[DocumentSearchResponse]: R\u00e9sultats format\u00e9s avec le contexte de la recherche et les m\u00e9tadonn\u00e9es. hybrid_search ( db , query , filters = None , top_k = 10 ) M\u00e9thode principale expos\u00e9e pour la recherche hybride. Parameters: db ( Session ) \u2013 Session de base de donn\u00e9es. query ( str ) \u2013 Texte de la requ\u00eate. filters ( dict , default: None ) \u2013 Filtres sur les m\u00e9tadonn\u00e9es (date, th\u00e8me, type). top_k ( int , default: 10 ) \u2013 Nombre de r\u00e9sultats \u00e0 retourner. Returns: SearchResults ( SearchResults ) \u2013 R\u00e9sultats de recherche avec leurs m\u00e9tadonn\u00e9es. search ( db , query , filters = None , top_k = 10 ) Recherche hybride combinant filtrage par m\u00e9tadonn\u00e9es et recherche vectorielle. Parameters: db ( Session ) \u2013 Session de base de donn\u00e9es. query ( str ) \u2013 Texte de la requ\u00eate. filters ( dict , default: None ) \u2013 Filtres sur les m\u00e9tadonn\u00e9es. top_k ( int , default: 10 ) \u2013 Nombre de r\u00e9sultats \u00e0 retourner. Returns: List [ DocumentSearchResponse ] \u2013 List[DocumentSearchResponse]: Liste des r\u00e9sultats format\u00e9s. SearchResults Bases: BaseModel Classe repr\u00e9sentant les r\u00e9sultats de recherche. Contient la requ\u00eate, les filtres appliqu\u00e9s, le nombre total de r\u00e9sultats et les r\u00e9sultats eux-m\u00eames. Parameters: query ( str ) \u2013 La requ\u00eate de recherche. filters ( dict ) \u2013 Les filtres appliqu\u00e9s lors de la recherche. total_results ( int ) \u2013 Le nombre total de r\u00e9sultats trouv\u00e9s. results ( List [ DocumentSearchResponse ] ) \u2013 Liste des r\u00e9sultats de recherche format\u00e9s. add_documents ( documents ) Ajoute une liste de documents \u00e0 la base de donn\u00e9es et g\u00e9n\u00e8re leurs embeddings. Parameters: documents ( List [ DocumentCreate ] ) \u2013 Liste de documents \u00e0 ajouter. Returns: \u2013 R\u00e9sultat de l'op\u00e9ration avec les IDs des documents ajout\u00e9s ou les erreurs rencontr\u00e9es. delete_document ( document_id ) Supprime un document de la base de donn\u00e9es. Parameters: document_id ( int ) \u2013 ID du document \u00e0 supprimer. Returns: \u2013 R\u00e9sultat de l'op\u00e9ration. update_document ( document_update ) Met \u00e0 jour un document existant dans la base de donn\u00e9es. Parameters: document_update ( DocumentUpdate ) \u2013 Objet contenant les champs \u00e0 mettre \u00e0 jour. Returns: \u2013 R\u00e9sultat de l'op\u00e9ration.","title":"vectordb"},{"location":"vectordb/#references","text":"","title":"References"},{"location":"vectordb/#vectordb.Document","text":"Bases: Base Mod\u00e8le SQLAlchemy repr\u00e9sentant un document dans la base de donn\u00e9es. Attributes: id ( Mapped [ int ] ) \u2013 Identifiant unique du document. title ( Mapped [ str ] ) \u2013 Titre du document. content ( Mapped [ str ] ) \u2013 Contenu du document. theme ( Mapped [ str ] ) \u2013 Th\u00e8me du document. document_type ( Mapped [ str ] ) \u2013 Type de document. publish_date ( Mapped [ date ] ) \u2013 Date de publication du document. embedding ( Mapped [ Optional [ str ]] ) \u2013 Repr\u00e9sentation vectorielle du contenu du document.","title":"Document"},{"location":"vectordb/#vectordb.SearchEngine","text":"Classe principale pour effectuer des recherches hybrides. Combine filtrage par m\u00e9tadonn\u00e9es et recherche vectorielle.","title":"SearchEngine"},{"location":"vectordb/#vectordb.SearchEngine.__init__","text":"Initialise les composants n\u00e9cessaires pour la recherche.","title":"__init__"},{"location":"vectordb/#vectordb.SearchEngine.format_results","text":"Formate les r\u00e9sultats de recherche avant de les renvoyer au frontend. Parameters: query ( str ) \u2013 La requ\u00eate de recherche. results ( List [ Document ] ) \u2013 Liste des r\u00e9sultats de recherche. filters ( dict ) \u2013 Filtres appliqu\u00e9s lors de la recherche. Returns: List [ DocumentSearchResponse ] \u2013 List[DocumentSearchResponse]: R\u00e9sultats format\u00e9s avec le contexte de la recherche et les m\u00e9tadonn\u00e9es.","title":"format_results"},{"location":"vectordb/#vectordb.SearchEngine.hybrid_search","text":"M\u00e9thode principale expos\u00e9e pour la recherche hybride. Parameters: db ( Session ) \u2013 Session de base de donn\u00e9es. query ( str ) \u2013 Texte de la requ\u00eate. filters ( dict , default: None ) \u2013 Filtres sur les m\u00e9tadonn\u00e9es (date, th\u00e8me, type). top_k ( int , default: 10 ) \u2013 Nombre de r\u00e9sultats \u00e0 retourner. Returns: SearchResults ( SearchResults ) \u2013 R\u00e9sultats de recherche avec leurs m\u00e9tadonn\u00e9es.","title":"hybrid_search"},{"location":"vectordb/#vectordb.SearchEngine.search","text":"Recherche hybride combinant filtrage par m\u00e9tadonn\u00e9es et recherche vectorielle. Parameters: db ( Session ) \u2013 Session de base de donn\u00e9es. query ( str ) \u2013 Texte de la requ\u00eate. filters ( dict , default: None ) \u2013 Filtres sur les m\u00e9tadonn\u00e9es. top_k ( int , default: 10 ) \u2013 Nombre de r\u00e9sultats \u00e0 retourner. Returns: List [ DocumentSearchResponse ] \u2013 List[DocumentSearchResponse]: Liste des r\u00e9sultats format\u00e9s.","title":"search"},{"location":"vectordb/#vectordb.SearchResults","text":"Bases: BaseModel Classe repr\u00e9sentant les r\u00e9sultats de recherche. Contient la requ\u00eate, les filtres appliqu\u00e9s, le nombre total de r\u00e9sultats et les r\u00e9sultats eux-m\u00eames. Parameters: query ( str ) \u2013 La requ\u00eate de recherche. filters ( dict ) \u2013 Les filtres appliqu\u00e9s lors de la recherche. total_results ( int ) \u2013 Le nombre total de r\u00e9sultats trouv\u00e9s. results ( List [ DocumentSearchResponse ] ) \u2013 Liste des r\u00e9sultats de recherche format\u00e9s.","title":"SearchResults"},{"location":"vectordb/#vectordb.add_documents","text":"Ajoute une liste de documents \u00e0 la base de donn\u00e9es et g\u00e9n\u00e8re leurs embeddings. Parameters: documents ( List [ DocumentCreate ] ) \u2013 Liste de documents \u00e0 ajouter. Returns: \u2013 R\u00e9sultat de l'op\u00e9ration avec les IDs des documents ajout\u00e9s ou les erreurs rencontr\u00e9es.","title":"add_documents"},{"location":"vectordb/#vectordb.delete_document","text":"Supprime un document de la base de donn\u00e9es. Parameters: document_id ( int ) \u2013 ID du document \u00e0 supprimer. Returns: \u2013 R\u00e9sultat de l'op\u00e9ration.","title":"delete_document"},{"location":"vectordb/#vectordb.update_document","text":"Met \u00e0 jour un document existant dans la base de donn\u00e9es. Parameters: document_update ( DocumentUpdate ) \u2013 Objet contenant les champs \u00e0 mettre \u00e0 jour. Returns: \u2013 R\u00e9sultat de l'op\u00e9ration.","title":"update_document"}]}